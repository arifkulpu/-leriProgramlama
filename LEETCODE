Soru 3 :
 Longest Substring Without Repeating Characters
Given a string, find the length of the longest substring without repeating characters.
Cevap : "abcabcbb"
/**
 * @param {string} s
 * @return {number}
 */
var lengthOfLongestSubstring = function(s) {
    let max_len = 0;
    let curr = 0;
    let hash = {}; 
    if(s.length < 2) {
        return s.length;
    }
    for(let i = 0; i < s.length;  i++) {
        if(hash[s[i]] == null) {
            curr += 1;
        } else {
            curr = Math.min(i - hash[s[i]], curr + 1);
        }
        max_len = Math.max(max_len, curr);
        hash[s[i]] = i; //save the index
    }
    return max_len;
};

-------------------------------------------------------------------------------------------------

Soru 13 :
Roman to Integer Roman numerals are represented by seven different symbols: I, V, X, L, C, D and M.
Symbol       Value
I             1
V             5
X             10
L             50
C             100
D             500
M             1000
For example, two is written as II in Roman numeral, just two one's added together. Twelve is written as, XII, which is simply X + II. The number twenty seven is written as XXVII, which is XX + V + II.
Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not IIII. Instead, the number four is written as IV. Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as IX. There are six instances where subtraction is used:
•	I can be placed before V (5) and X (10) to make 4 and 9. 
•	X can be placed before L (50) and C (100) to make 40 and 90. 
•	C can be placed before D (500) and M (1000) to make 400 and 900.
Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.
Cevap : "III", “3”
/**
 * @param {string} s
 * @return {number}
 */
var romanToInt = function(s) {
    s = s.split('');
    let total = 0;
    rVals = {
        I:1,
        V:5,
        X:10,
        L:50,
        C:100,
        D:500,
        M:1000
    }
    for (let i=s.length-1;i>=0;i--) {
        total += (rVals[s[i]] < (rVals[s[i+1]||0])? -rVals[s[i]] : rVals[s[i]]);
    }
    return total;
};

-------------------------------------------------------------------------------------------------

Soru 23 :
 Merge k Sorted Lists Merge k sorted linked lists and return it as one sorted list. Analyze and describe its complexity.
Cevap : [1,1,2,3,4,4,5,6]
class MinHeap{
    constructor(){
        this.heap = [];
    }
    
  // O(log(n)) time | O(1) space 
  siftUp(currentIdx, heap){
    let parentIdx = Math.floor((currentIdx - 1) / 2);
       while(parentIdx >= 0 && heap[parentIdx] > heap[currentIdx]){
            this.swap(parentIdx, currentIdx, heap);
           currentIdx = parentIdx;
           parentIdx = Math.floor((currentIdx - 1) / 2);
        }
    }
    
  // O(log(n)) time | O(1) space 
  siftDown(parentIdx, endIdx, heap){
      let childOneIdx = (parentIdx * 2) +1;
      while(childOneIdx <= endIdx){
          let childTwoIdx = (parentIdx * 2) +2 <= endIdx ?(parentIdx * 2) +2 : -1;
          let idxToSwap;
          if(childTwoIdx != -1 && heap[childTwoIdx] < heap[childOneIdx]){
              idxToSwap = childTwoIdx; 
          }else{
              idxToSwap = childOneIdx
          }
          if(heap[parentIdx] > heap[idxToSwap]){
              this.swap(parentIdx, idxToSwap, heap);
              parentIdx = idxToSwap;
              childOneIdx = (parentIdx * 2) +1;
          }else{
              return;
          }
      }
  }
    
    // O(log(n)) time | O(1) space 
    insert(value){
        this.heap.push(value);
        this.siftUp(this.heap.length-1, this.heap);
    }
    
    // O(log(n)) time | O(1) space 
    remove(){
        this.swap(0, this.heap.length-1, this.heap);
        let removedVal = this.heap.pop();
        this.siftDown(0, this.heap.length-1, this.heap);
        return removedVal;
    }
    
    // O(1) time | O(1) space 
    size(){
        return this.heap.length;
    }
    
    // O(1) time | O(1) space 
    swap(i, j, arr){
        let temp = arr[i];
        arr[i] = arr[j];
        arr[j] = temp
    }
}
     
     
class LinkedList{
    constructor(val, next){
        this.val = val;
        this.next = next
    }
}

// O(NlogN) time | O(N) space in which N is the length of all values in all lists
var mergeKLists = function(lists) {
    let pq = new MinHeap();


    for(let list of lists){
      while(list != null){
          pq.insert(list.val);
          list = list.next;
      }
    }
    
    let mergedList = new LinkedList(0, null);
    let head = mergedList;
    while(pq.size() > 0){
        let val = pq.remove();
        head.next = new LinkedList(val, null);
        head = head.next;
    }
    
    return mergedList.next;
};

-------------------------------------------------------------------------------------------------

Soru 33 :
Search in Rotated Sorted Array uppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.
(i.e., [0,1,2,4,5,6,7] might become [4,5,6,7,0,1,2]).
You are given a target value to search. If found in the array return its index, otherwise return -1.
You may assume no duplicate exists in the array.
Your algorithm's runtime complexity must be in the order of O(log n).
Cevap : 4
/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number}
 */
var search = function (nums, target) {
  const minIndex = findMinimum(nums)
  if (nums[minIndex] === target) return minIndex;
  if (target > nums[minIndex] && target > nums[nums.length - 1]) { //if greater than than the mid and last
    let index = binarySearch(0, minIndex, nums, target) //search the first half of the array
    if (index !== -1) return index
  } else {
    let index = binarySearch(minIndex, nums.length, nums, target) //search the remainder of the array
    return index;
  }
  return -1
};

function findMinimum(arr) {
  let l = 0;
  let r = arr.length - 1;
  while (l < r) {
    const mid = Math.floor((r + l) / 2)
    if (arr[mid] > arr[r]) {
      l = mid + 1
    } else {
      r = mid
    }
  }
  return l
}

function binarySearch(l, r, arr, target) {
  while (l <= r) {
    const mid = Math.floor((r + l) / 2)
    if (arr[mid] === target) {
      return mid
    } else if (arr[mid] > target) {
      r = mid - 1
    } else {
      l = mid + 1
    }
  }
  return -1}
Soru 53 :
Maximum Subarray Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.
Cevap : 6
/**
 * @param {number[]} nums
 * @return {number}
 */
 var maxSubArray = function(nums) {
    if (nums.length ==1) return nums[0];
    let currMax = nums[0];
    let history = nums[0];
    for (i=1, z=nums.length; i<z; i++){
        history = Math.max(history+nums[i], nums[i]);
        currMax = Math.max(history, currMax)
    }
    return currMax;
};
